---

---

<div id="container1">
  <div class="btn-container">
    <button class="button-27" role="button" id="buttonUTC">UTC</button>
    <button class="button-27" role="button" id="buttonGMT">GMT</button>
  </div>
  <div class="graph2"></div>
</div>

<style>
  #container1 {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    margin-top: 2rem;
  }
  #container1 :global(svg) {
    width: 100%;
    height: 80vh;
    /* background-color: rgba(141, 196, 235, 0.5); */
  }

  .button {
    background-color: aliceblue;
  }

  .btn-container {
    display: flex;
    flex-flow: row;
  }

  /* CSS */
  .button-27 {
    appearance: none;
    background-color: #e2eafa;
    border: 2px solid #1a1a1a;
    border-radius: 15px;
    box-sizing: border-box;
    color: #1a1a1a;
    cursor: pointer;
    display: inline-block;
    font-family:
      Roobert,
      -apple-system,
      BlinkMacSystemFont,
      "Segoe UI",
      Helvetica,
      Arial,
      sans-serif,
      "Apple Color Emoji",
      "Segoe UI Emoji",
      "Segoe UI Symbol";
    font-size: 16px;
    font-weight: 600;
    line-height: normal;
    margin-left: 1rem;
    margin-right: 1rem;
    min-height: 48px;
    min-width: 96px;
    outline: none;
    padding: 16px 24px;
    text-align: center;
    text-decoration: none;
    transition: all 300ms cubic-bezier(0.23, 1, 0.32, 1);
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    width: 100%;
    will-change: transform;
  }

  .button-27:disabled {
    pointer-events: none;
  }

  .button-27:hover {
    box-shadow: rgba(0, 0, 0, 0.25) 0 8px 15px;
    transform: translateY(-2px);
  }

  .button-27:active {
    box-shadow: none;
    transform: translateY(0);
  }

  :global(.xAxis) {
    fill: #fff;
  }
</style>

<script>
  // importations ------------------------------------------------------------------------------------------------------------------------------------------
  import * as d3 from "d3";

  // gestion des datas -------------------------------------------------------------------------------------------------------------------------------------
  const heuresLancements = await d3.json("/assets/data/heures_lancements.json");
  const positions = await d3.json("/assets/data/positions.json");

  // GMT ---------------------------------------------------------------------------------------------------------------------------------------------------

  // sépare les heures par tranches dd 15 minutes
  const diviseur = 15;
  let numberTrim = [];
  let heuresTrim = [];
  let heuresLancementsGMT = [];

  const tabHours = (data) => {
    heuresTrim = [];
    data.forEach((e) => {
      const heures = parseInt(e.heure.split(":")[0]);
      const minutes = parseInt(e.heure.split(":")[1]);
      const tempsHeures = heures * 60 + minutes;
      const tempsTrim = Math.floor(tempsHeures / diviseur) * diviseur;
      const newHeures = Math.floor(tempsTrim / 60);
      const newMinutes = tempsTrim - newHeures * 60;
      let newHeureString;
      let newMinutesString;

      newHeures < 10
        ? (newHeureString = "0" + newHeures.toString())
        : (newHeureString = newHeures.toString());
      newMinutes < 10
        ? (newMinutesString = "0" + newMinutes.toString())
        : (newMinutesString = newMinutes.toString());

      const newTime = newHeureString + ":" + newMinutesString;
      heuresTrim.push(tempsTrim);
    });
  };

  // tri par défault
  tabHours(heuresLancements);

  const UTC = () => {
    tabHours(heuresLancements);
    document.querySelector(".graph2").innerHTML = "";
    dataDisplay();
  };

  const GMT = () => {
    heuresLancementsGMT = [];
    heuresLancements.forEach((e) => {
      positions.forEach((el) => {
        if (e.location == el.positions) {
          const strToInt = (val) => {
            const [hours, minutes] = val.split(":");
            const hoursNumber = parseInt(hours, 10);
            const minutesNumber = parseInt(minutes, 10);
            const valToInt = hoursNumber + minutesNumber / 60;
            return valToInt;
          };

          // avoir l'offset en valeur numérique
          const offsetInt = strToInt(el.offset);

          // avoir l'heure de lancement en valeur numérique
          const heureLancementInt = strToInt(e.heure);

          let newTime = heureLancementInt + offsetInt;

          if (newTime >= 24) {
            newTime -= 24;
          } else if (newTime < 0) {
            newTime += 24;
          }

          function convertDecimalToTimeString(decimalTime) {
            // Extraire la partie entière des heures
            const hours = Math.floor(decimalTime);

            // Extraire la partie décimale et la convertir en minutes
            const minutes = Math.round((decimalTime - hours) * 60);

            // Formater les heures et les minutes pour avoir toujours deux chiffres
            const formattedHours = String(hours).padStart(2, "0");
            const formattedMinutes = String(minutes).padStart(2, "0");

            // Combiner les heures et les minutes pour obtenir le résultat final
            return `${formattedHours}:${formattedMinutes}`;
          }

          const newTimeStr = convertDecimalToTimeString(newTime);

          heuresLancementsGMT.push({ location: e.location, heure: newTimeStr });
        }
      });
    });
    tabHours(heuresLancementsGMT);
    document.querySelector(".graph2").innerHTML = "";
    dataDisplay();
  };

  const dataDisplay = () => {
    numberTrim = [];
    // je fais des groupes d'heures avec le nombre par tranche
    heuresTrim.filter((element, index, self) => {
      if (self.indexOf(element) === index) {
        let count = self.filter((e) => e === element).length;
        numberTrim.push([element, count]);
      }
    });

    // je sort les tranches par heures ascendantes
    numberTrim.sort(sortFunction);

    function sortFunction(a, b) {
      if (a[0] === b[0]) {
        return 0;
      } else {
        return a[0] < b[0] ? -1 : 1;
      }
    }

    // je transforme les tranches d'heures en string
    numberTrim.forEach((element) => {
      element[0] = element[0].toString();
    });

    // Transformer le tableau en JSON
    const chartData = numberTrim.map(function (item) {
      return {
        minutesString: item[0].toString(),
        minutes: parseInt(item[0]),
        heure: item[1],
      };
    });

    // CHANGING DATA --------------------------------------------------------------------------------------------------------------------------------------------

    const width = 900;
    const height = 900;
    const innerRadius = (0.35 * width) / 2;
    const outerRadius = (0.9 * width) / 2;

    const xScale = d3.scaleBand(
      chartData.map((d) => d.minutesString),
      [0, 2 * Math.PI]
    );

    const yScale = d3
      .scaleLinear()
      .domain([0, d3.max(chartData, (d) => d.heure)])
      .range([innerRadius, outerRadius]);

    const arc = d3
      .arc()
      .innerRadius((d) => yScale(0))
      .outerRadius((d) => yScale(d.heure))
      .startAngle((d) => xScale(d.minutesString))
      .endAngle((d) => xScale(d.minutesString) + xScale.bandwidth())
      .padAngle(0.01)
      .padRadius(innerRadius);

    const svg = d3
      .create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", `0 0 ${width} ${height}`)
      .attr("preserveAspectRatio", `xMidYMid meet`);

    const container = svg
      .append("g")
      .attr("class", "container")
      .attr("transform", `translate(${width / 2},${height / 2})`)
      .style("font-size", 10)
      .style("font-family", "sans-serif");

    container
      .selectAll("path")
      .data(chartData)
      .join("path")
      .style("fill", "steelblue")
      .style("stroke", "steelblue")
      .attr("d", arc);

    const xAxis = (g) =>
      g.attr("text-anchor", "middle").call((g) =>
        g
          .selectAll("g")
          .data([
            6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
            0, 1, 2, 3, 4, 5,
          ])
          .join("g")
          .attr(
            "transform",
            (d, i, arr) => `
        rotate(${(i * 360) / arr.length})
        translate(${innerRadius},0)
      `
          )
          .attr("class", "xAxis")
          .call((g) =>
            g
              .append("line")
              .attr("x1", -5)
              .attr("x2", outerRadius - innerRadius + 10)
              .style("stroke", "#aaa")
          )
          .call((g) =>
            g
              .append("text")
              .attr("transform", (d, i, arr) =>
                ((i * 360) / arr.length) % 360 > 180
                  ? "rotate(90)translate(0,18)"
                  : "rotate(-90)translate(0,-10)"
              )
              .style("font-family", "sans-serif")
              .style("font-size", 15)
              .text((d) => d)
          )
      );

    const yAxis = (g) =>
      g
        .attr("text-anchor", "middle")
        .call((g) =>
          g
            .append("text")
            .attr("text-anchor", "end")
            .attr("x", "-0.5em")
            .attr("y", (d) => -yScale(yScale.ticks(5).pop()) - 10)
            .attr("dy", "-1em")
            .style("fill", "#fff")
            .text("Launches (number)")
        )
        .call((g) =>
          g
            .selectAll("g")
            .data(yScale.ticks(5))
            .join("g")
            .attr("fill", "none")
            .call((g) =>
              g
                .append("circle")
                .style("stroke", "#aaa")
                .style("stroke-opacity", 0.5)
                .attr("r", yScale)
            )
            .call((g) =>
              g
                .append("text")
                .attr("y", (d) => -yScale(d))
                .attr("dy", "0.35em")
                .style("stroke", "#fff")
                .style("stroke-width", 5)
                .style("fill", "#1a1a1a")
                .text(yScale.tickFormat(6, "s"))
                .clone(true)
                .style("stroke", "none")
            )
        );

    container.append("g").call(xAxis);

    container.append("g").call(yAxis);

    // Append the SVG element.
    document.querySelector(".graph2").append(svg.node());
  };

  // lancer le display pour la première fois
  dataDisplay();

  document.querySelector("#buttonUTC").addEventListener("click", UTC);
  document.querySelector("#buttonGMT").addEventListener("click", GMT);

  /* document
    .querySelector("#container1")
    .insertBefore(svg.node(), document.querySelector("#container1").firstChild); */
</script>
