---

---

<div id="container1"></div>

<style>
  #container1 {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  :global(svg) {
    /* background-color: rgba(141, 196, 235, 0.5); */
  }
</style>

<script>
  // importations ------------------------------------------------------------------------------------------------------------------------------------------
  import * as d3 from "d3";
  import { select } from "d3-selection";

  // gestion des datas -------------------------------------------------------------------------------------------------------------------------------------
  const heuresLancements = await d3.json("/assets/data/heures_lancements.json");
  const unemployment = await d3.json("/assets/data/unemployment.json");
  const data = await d3.json("/assets/data/data.json");
  const data2 = await d3.json("/assets/data/data2.json");

  // GMT ---------------------------------------------------------------------------------------------------------------------------------------------------

  // sépare les heures par tranches dd 15 minutes
  const diviseur = 15;
  const heuresTab = [];
  const heuresTrim = [];
  const numberTrim = [];

  heuresLancements.forEach((e) => {
    const heures = parseInt(e.heure.split(":")[0]);
    const minutes = parseInt(e.heure.split(":")[1]);
    const tempsHeures = heures * 60 + minutes;
    const tempsTrim = Math.floor(tempsHeures / diviseur) * diviseur;
    const newHeures = Math.floor(tempsTrim / 60);
    const newMinutes = tempsTrim - newHeures * 60;
    let newHeureString;
    let newMinutesString;

    newHeures < 10
      ? (newHeureString = "0" + newHeures.toString())
      : (newHeureString = newHeures.toString());
    newMinutes < 10
      ? (newMinutesString = "0" + newMinutes.toString())
      : (newMinutesString = newMinutes.toString());

    const newTime = newHeureString + ":" + newMinutesString;

    heuresTab.push(newTime);
    heuresTrim.push(tempsTrim);
  });

  // je fais des groupes d'heures avec le nombre par tranche
  heuresTrim.filter((element, index, self) => {
    if (self.indexOf(element) === index) {
      let count = self.filter((e) => e === element).length;
      numberTrim.push([element, count]);
    }
  });

  // je sort les tranches par heures ascendantes
  numberTrim.sort(sortFunction);

  function sortFunction(a, b) {
    if (a[0] === b[0]) {
      return 0;
    } else {
      return a[0] < b[0] ? -1 : 1;
    }
  }

  // je transforme les tranches d'heures en string
  numberTrim.forEach((element) => {
    element[0] = element[0].toString();
  });

  // Transformer le tableau en JSON
  const chartData = numberTrim.map(function (item) {
    return {
      minutesString: item[0].toString(),
      minutes: parseInt(item[0]),
      heure: item[1],
    };
  });

  // CHANGING DATA --------------------------------------------------------------------------------------------------------------------------------------------

  const width = 900;
  const height = 900;
  const innerRadius = (0.35 * width) / 2;
  const outerRadius = (0.9 * width) / 2;

  const xScale = d3.scaleBand(
    chartData.map((d) => d.minutesString),
    [0, 2 * Math.PI]
  );

  const yScale = d3
    .scaleLinear()
    .domain([0, d3.max(chartData, (d) => d.heure)])
    .range([innerRadius, outerRadius]);

  const arc = d3
    .arc()
    .innerRadius((d) => yScale(0))
    .outerRadius((d) => yScale(d.heure))
    .startAngle((d) => xScale(d.minutesString))
    .endAngle((d) => xScale(d.minutesString) + xScale.bandwidth())
    .padAngle(0.01)
    .padRadius(innerRadius);

  const svg = d3.create("svg").attr("width", width).attr("height", height);

  const container = svg
    .append("g")
    .attr("class", "container")
    .attr("transform", `translate(${width / 2},${height / 2})`)
    .style("font-size", 10)
    .style("font-family", "sans-serif");

  container
    .selectAll("path")
    .data(chartData)
    .join("path")
    .style("fill", "steelblue")
    .style("stroke", "steelblue")
    .attr("d", arc);

  const xAxis = (g) =>
    g.attr("text-anchor", "middle").call((g) =>
      g
        .selectAll("g")
        .data([
          1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
          21, 22, 23, 24,
        ])
        .join("g")
        .attr(
          "transform",
          (d, i, arr) => `
          rotate(${(i * 360) / arr.length})
          translate(${innerRadius},0)
        `
        )
        .call((g) =>
          g
            .append("line")
            .attr("x1", -5)
            .attr("x2", outerRadius - innerRadius + 10)
            .style("stroke", "#aaa")
        )
        .call((g) =>
          g
            .append("text")
            .attr("transform", (d, i, arr) =>
              ((i * 360) / arr.length) % 360 > 180
                ? "rotate(90)translate(0,16)"
                : "rotate(-90)translate(0,-9)"
            )
            .style("font-family", "sans-serif")
            .style("font-size", 10)
            .text((d) => d)
        )
    );

  const yAxis = (g) =>
    g
      .attr("text-anchor", "middle")
      .call((g) =>
        g
          .append("text")
          .attr("text-anchor", "end")
          .attr("x", "-0.5em")
          .attr("y", (d) => -yScale(yScale.ticks(5).pop()) - 10)
          .attr("dy", "-1em")
          .style("fill", "#1a1a1a")
          .text("Temperature (°C)")
      )
      .call((g) =>
        g
          .selectAll("g")
          .data(yScale.ticks(5))
          .join("g")
          .attr("fill", "none")
          .call((g) =>
            g
              .append("circle")
              .style("stroke", "#aaa")
              .style("stroke-opacity", 0.5)
              .attr("r", yScale)
          )
          .call((g) =>
            g
              .append("text")
              .attr("y", (d) => -yScale(d))
              .attr("dy", "0.35em")
              .style("stroke", "#fff")
              .style("stroke-width", 5)
              .style("fill", "#1a1a1a")
              .text(yScale.tickFormat(6, "s"))
              .clone(true)
              .style("stroke", "none")
          )
      );

  container.append("g").call(xAxis);

  container.append("g").call(yAxis);

  // Append the SVG element.
  document.querySelector("#container1").append(svg.node());
</script>
